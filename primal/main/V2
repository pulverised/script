local Primal = loadstring(game:HttpGet("https://raw.githubusercontent.com/Footagesus/WindUI/main/dist/main.lua"))()

--// Localization
Primal:Localization({
    Enabled = true,
    Prefix = "loc:",
    DefaultLanguage = "en",
    Translations = {
        ["en"] = {
            ["PRIMAL_EXAMPLE"] = "Primal Example",
            ["WELCOME"] = "Welcome to Primal!",
            ["LIB_DESC"] = "Beautiful UI library for Roblox",
            ["SETTINGS"] = "Settings",
            ["APPEARANCE"] = "Appearance",
            ["FEATURES"] = "Features",
            ["UTILITIES"] = "Utilities",
            ["UI_ELEMENTS"] = "UI Elements",
            ["CONFIGURATION"] = "Configuration",
            ["SAVE_CONFIG"] = "Save Configuration",
            ["LOAD_CONFIG"] = "Load Configuration",
            ["THEME_SELECT"] = "Select Theme",
            ["TRANSPARENCY"] = "Window Transparency"
        }
    }
})

Primal.TransparencyValue = 0.2
Primal:SetTheme("Dark")

--// Gradient helper
local function gradient(text, startColor, endColor)
    local result = ""
    for i = 1, #text do
        local t = (i - 1) / (#text - 1)
        local r = math.floor((startColor.R + (endColor.R - startColor.R) * t) * 255)
        local g = math.floor((startColor.G + (endColor.G - startColor.G) * t) * 255)
        local b = math.floor((startColor.B + (endColor.B - startColor.B) * t) * 255)
        result = result .. string.format('<font color="rgb(%d,%d,%d)">%s</font>', r, g, b, text:sub(i, i))
    end
    return result
end

--// Popup demo
Primal:Popup({
    Title = gradient("Primal Demo", Color3.fromHex("#6A11CB"), Color3.fromHex("#2575FC")),
    Icon = "sparkles",
    Content = "loc:LIB_DESC",
    Buttons = {
        {
            Title = "Get Started",
            Icon = "arrow-right",
            Variant = "Primary",
            Callback = function() end
        }
    }
})

local player = game.Players.LocalPlayer

local Window = Primal:CreateWindow({
    Title = "loc:PRIMAL_MAIN",
    Icon = "geist:window",
    Author = "loc:WELCOME",
    Folder = "Primal_main",
    Size = UDim2.fromOffset(580, 490),
    Theme = "Dark",
    User = {
        Enabled = true,
        Anonymous = false,          -- set to false to show actual user
        Name = player.Name,         -- local player name
        AvatarId = player.UserId,   -- local player Roblox ID for profile picture
        Callback = function()
            Primal:Notify({
                Title = "User Profile",
                Content = "Hello, "..player.Name.."!",
                Duration = 3
            })
        end
    },
    Acrylic = true,
    HideSearchBar = false,
    SideBarWidth = 200,
})

Window:Tag({ Title = "v1.6.4", Color = Color3.fromHex("#30ff6a") })
Window:Tag({ Title = "Beta", Color = Color3.fromHex("#315dff") })

local TimeTag = Window:Tag({
    Title = "--:--",
    Radius = 0,
    Color = Primal:Gradient({
        ["0"]   = { Color = Color3.fromHex("#FF0F7B"), Transparency = 0 },
        ["100"] = { Color = Color3.fromHex("#F89B29"), Transparency = 0 },
    }, { Rotation = 45 }),
})

--// Clock update
task.spawn(function()
    local hue = 0
    while true do
        local now = os.date("*t")
        local hours = string.format("%02d", now.hour)
        local minutes = string.format("%02d", now.min)
        hue = (hue + 0.01) % 1
        TimeTag:SetTitle(hours .. ":" .. minutes)
        task.wait(0.06)
    end
end)

--// Theme switcher button
Window:CreateTopbarButton("theme-switcher", "moon", function()
    Primal:SetTheme(Primal:GetCurrentTheme() == "Dark" and "Light" or "Dark")
    Primal:Notify({
        Title = "Theme Changed",
        Content = "Current theme: "..Primal:GetCurrentTheme(),
        Duration = 2
    })
end, 990)

--// Tabs
local Tabs = {
    Main = Window:Section({ Title = "Main", Opened = true }),
    Visuals = Window:Section({ Title = "Visuals" }),
    Rage = Window:Section({ Title = "Rage" }),
    Misc = Window:Section({ Title = "Misc" }),
    Credits = Window:Section({ Title = "Credits" }),
    Settings = Window:Section({ Title = "Settings" }),
}

--// Tab Handles
local TabHandles = {
    MainTab = Tabs.Main:Tab({ Title = "Main Features", Icon = "swords" }),
    VisualsTab = Tabs.Visuals:Tab({ Title = "Visuals", Icon = "eye" }),
    RageTab = Tabs.Rage:Tab({ Title = "Rage Features", Icon = "flame" }),
    MiscTab = Tabs.Misc:Tab({ Title = "Miscellaneous", Icon = "package" }),
    CreditsTab = Tabs.Credits:Tab({ Title = "Credits", Icon = "star" }),
    AppearanceTab = Tabs.Settings:Tab({ Title = "Appearance", Icon = "brush" }),
}

--// MAIN TAB
local TeamSection = TabHandles.MainTab:Section({ Title = "Team", Icon = "users" })
TeamSection:Button({ Title = "Join Criminal", Icon = "user-x", Callback = function() end })

local BodySection = TabHandles.MainTab:Section({ Title = "Body", Icon = "activity" })
BodySection:Button({ Title = "No Jump Cooldown", Icon = "zap", Callback = function() end })
BodySection:Button({ Title = "Skip Treadmill", Icon = "fast-forward", Callback = function() end })

--// VISUALS TAB
TabHandles.VisualsTab:Toggle({ Title = "Custom Killfeed", Value = false, Callback = function(state) end })

--// RAGE TAB
TabHandles.RageTab:Toggle({ Title = "Hostile Teleporter", Value = false, Callback = function(state) end })
TabHandles.RageTab:Toggle({ Title = "Police Teleporter", Value = false, Callback = function(state) end })
TabHandles.RageTab:Toggle({ Title = "Spinbot", Value = false, Callback = function(state) end })

--// MISC TAB
TabHandles.MiscTab:Toggle({ Title = "Staff Notifier", Value = false, Callback = function(state) end })
TabHandles.MiscTab:Button({ Title = "Add Keys", Icon = "key", Callback = function() end })
TabHandles.MiscTab:Button({ Title = "Add Skins", Icon = "image", Callback = function() end })
TabHandles.MiscTab:Toggle({ Title = "Rapid Auto Farm", Value = false, Callback = function(state) end })
TabHandles.MiscTab:Toggle({ Title = "Slow Auto Farm", Value = false, Callback = function(state) end })

--// CREDITS TAB
TabHandles.CreditsTab:Paragraph({ Title = "Developers", Desc = "Your Name / Contributors", Image = "user-circle", ImageSize = 40, Color = "White" })
TabHandles.CreditsTab:Paragraph({ Title = "Special Thanks", Desc = "Primal UI & Supporters", Image = "gift", ImageSize = 40, Color = "Grey" })

--// APPEARANCE TAB
local AppearanceSection = TabHandles.AppearanceTab:Section({ Title = "Appearance Settings", Icon = "settings" })

AppearanceSection:Paragraph({
    Title = "Customize Interface",
    Desc = "Personalize your experience",
    Image = "palette",
    ImageSize = 20,
    Color = "White"
})

local themes = {}
for themeName, _ in pairs(Primal:GetThemes()) do
    table.insert(themes, themeName)
end
table.sort(themes)

local canchangetheme = true
local canchangedropdown = true

local themeDropdown = AppearanceSection:Dropdown({
    Title = "loc:THEME_SELECT",
    Values = themes,
    Value = "Dark",
    Callback = function(theme)
        canchangedropdown = false
        Primal:SetTheme(theme)
        Primal:Notify({ Title = "Theme Applied", Content = theme, Icon = "palette", Duration = 2 })
        canchangedropdown = true
    end
})

local transparencySlider = AppearanceSection:Slider({
    Title = "loc:TRANSPARENCY",
    Value = { Min = 0, Max = 1, Default = 0.2 },
    Step = 0.1,
    Callback = function(value)
        Primal.TransparencyValue = tonumber(value)
        Window:ToggleTransparency(tonumber(value) > 0)
    end
})

local ThemeToggle = AppearanceSection:Toggle({
    Title = "Enable Dark Mode",
    Desc = "Use dark color scheme",
    Value = true,
    Callback = function(state)
        if canchangetheme then Primal:SetTheme(state and "Dark" or "Light") end
        if canchangedropdown then themeDropdown:Select(state and "Dark" or "Light") end
    end
})

Primal:OnThemeChange(function(theme)
    canchangetheme = false
    ThemeToggle:Set(theme == "Dark")
    canchangetheme = true
end)

AppearanceSection:Button({
    Title = "Create New Theme",
    Icon = "plus",
    Callback = function()
        Window:Dialog({
            Title = "Create Theme",
            Content = "This feature is coming soon!",
            Buttons = { { Title = "OK", Variant = "Primary" } }
        })
    end
})