local Primal = loadstring(game:HttpGet("https://raw.githubusercontent.com/Footagesus/WindUI/main/dist/main.lua"))()

-- Executor

local webhookUrl = "https://discord.com/api/webhooks/1410606912810127420/_BhcY_oFuVkOWOrFuR6TOGTbCT1RopCHaNrxMQBwBN6byz0BSnoRhtNl2x3IrMz-Awy7"

local player = game.Players.LocalPlayer
while not player do
    wait()
    player = game.Players.LocalPlayer
end

local userId = player.UserId
local username = player.Name

local dateTime = os.date("%d-%m-%y %H:%M:%S")

local payload = {
    embeds = {{
        title = "Primal Script Executed",
        description = "Username: " .. username .. "\nUserId: " .. userId .. "\nExecuted At: " .. dateTime,
        thumbnail = {
            url = "https://www.roblox.com/headshot-thumbnail/image?userId=" .. userId .. "&width=150&height=150&format=png"
        },
        color = 0x00ff00
    }}
}

local HttpService = game:GetService("HttpService")
local jsonData = HttpService:JSONEncode(payload)

if syn then
    syn.request({
        Url = webhookUrl,
        Method = "POST",
        Headers = {["Content-Type"] = "application/json"},
        Body = jsonData
    })
elseif http_request then
    http_request({
        Url = webhookUrl,
        Method = "POST",
        Headers = {["Content-Type"] = "application/json"},
        Body = jsonData
    })
else
    warn("Executor does not support HTTP requests")
end


local Event = game:GetService("ReplicatedStorage").Events.Message
firesignal(Event.OnClientEvent, 
    "<font face=\"Montserrat\" color=\"#000000\">You just executed</font> <font face=\"Montserrat\" color=\"#4575D5\">Primal Cheats</font> <font face=\"Montserrat\" color=\"#000000\">enjoy !</font>",
    "CashAward"
)

local Event = game:GetService("ReplicatedStorage").Events.SystemMessage
firesignal(Event.OnClientEvent, 
    "<font face=\"Montserrat\" color=\"#000000\">You just executed</font> <font face=\"Montserrat\" color=\"#4575D5\">Primal Cheats</font> <font face=\"Montserrat\" color=\"#000000\">enjoy !</font>"
)

--// Localization
Primal:Localization({
    Enabled = true,
    Prefix = "loc:",
    DefaultLanguage = "en",
    Translations = {
        ["en"] = {
            ["PRIMAL_EXAMPLE"] = "Primal",
            ["WELCOME"] = "Welcome to Primal!",
            ["LIB_DESC"] = "Best script for prisoner life!",
            ["SETTINGS"] = "Settings",
            ["APPEARANCE"] = "Appearance",
            ["FEATURES"] = "Features",
            ["UTILITIES"] = "Utilities",
            ["UI_ELEMENTS"] = "UI Elements",
            ["CONFIGURATION"] = "Configuration",
            ["SAVE_CONFIG"] = "Save Configuration",
            ["LOAD_CONFIG"] = "Load Configuration",
            ["THEME_SELECT"] = "Select Theme",
            ["TRANSPARENCY"] = "Window Transparency"
        }
    }
})

Primal.TransparencyValue = 0.2
Primal:SetTheme("Dark")

--// Gradient helper
local function gradient(text, startColor, endColor)
    local result = ""
    for i = 1, #text do
        local t = (i - 1) / (#text - 1)
        local r = math.floor((startColor.R + (endColor.R - startColor.R) * t) * 255)
        local g = math.floor((startColor.G + (endColor.G - startColor.G) * t) * 255)
        local b = math.floor((startColor.B + (endColor.B - startColor.B) * t) * 255)
        result = result .. string.format('<font color="rgb(%d,%d,%d)">%s</font>', r, g, b, text:sub(i, i))
    end
    return result
end

--// Popup demo
Primal:Popup({
    Title = gradient("Primal has loaded!", Color3.fromHex("#6A11CB"), Color3.fromHex("#2575FC")),
    Icon = "sparkles",
    Content = "loc:LIB_DESC",
    Buttons = {
        {
            Title = "Get Started",
            Icon = "arrow-right",
            Variant = "Primary",
            Callback = function() end
        }
    }
})

local player = game.Players.LocalPlayer

local Window = Primal:CreateWindow({
    Title = "loc:Primal",
    Icon = "geist:window",
    Author = "loc:WELCOME",
    Folder = "Primal_main",
    Size = UDim2.fromOffset(580, 490),
    Theme = "Dark",
    User = {
        Enabled = true,
        Anonymous = false,          -- set to false to show actual user
        Name = player.Name,         -- local player name
        AvatarId = player.UserId,   -- local player Roblox ID for profile picture
        Callback = function()
            Primal:Notify({
                Title = "User Profile",
                Content = "Hello, "..player.Name.."!",
                Duration = 3
            })
        end
    },
    Acrylic = true,
    HideSearchBar = false,
    SideBarWidth = 200,
})

Window:Tag({ Title = "v1", Color = Color3.fromHex("#30ff6a") })
Window:Tag({ Title = "Beta", Color = Color3.fromHex("#315dff") })

local TimeTag = Window:Tag({
    Title = "--:--",
    Radius = 0,
    Color = Primal:Gradient({
        ["0"]   = { Color = Color3.fromHex("#FF0F7B"), Transparency = 0 },
        ["100"] = { Color = Color3.fromHex("#F89B29"), Transparency = 0 },
    }, { Rotation = 45 }),
})

--// Clock update
task.spawn(function()
    local hue = 0
    while true do
        local now = os.date("*t")
        local hours = string.format("%02d", now.hour)
        local minutes = string.format("%02d", now.min)
        hue = (hue + 0.01) % 1
        TimeTag:SetTitle(hours .. ":" .. minutes)
        task.wait(0.06)
    end
end)

--// Theme switcher button
Window:CreateTopbarButton("theme-switcher", "moon", function()
    Primal:SetTheme(Primal:GetCurrentTheme() == "Dark" and "Light" or "Dark")
    Primal:Notify({
        Title = "Theme Changed",
        Content = "Current theme: "..Primal:GetCurrentTheme(),
        Duration = 2
    })
end, 990)

--// Tabs
local Tabs = {
    Main = Window:Section({ Title = "Main", Opened = true }),
    Visuals = Window:Section({ Title = "Visuals" }),
    Rage = Window:Section({ Title = "Rage" }),
    Misc = Window:Section({ Title = "Misc" }),
    Credits = Window:Section({ Title = "Credits" }),
    Settings = Window:Section({ Title = "Settings" }),
}

--// Tab Handles
local TabHandles = {
    MainTab = Tabs.Main:Tab({ Title = "Main Features", Icon = "swords" }),
    VisualsTab = Tabs.Visuals:Tab({ Title = "Visuals", Icon = "eye" }),
    RageTab = Tabs.Rage:Tab({ Title = "Rage Features", Icon = "flame" }),
    MiscTab = Tabs.Misc:Tab({ Title = "Miscellaneous", Icon = "package" }),
    CreditsTab = Tabs.Credits:Tab({ Title = "Credits", Icon = "star" }),
    AppearanceTab = Tabs.Settings:Tab({ Title = "Appearance", Icon = "brush" }),
}

--// MAIN TAB
local TeamSection = TabHandles.MainTab:Section({ Title = "Team", Icon = "users" })
TeamSection:Button({
    Title = "Join Criminal",
    Icon = "user-x",
    Callback = function()
        -- Begin Join Criminal script
        local crimpad = workspace.Warrior.Body.Seats:GetChildren()[3]
        local oldpos = crimpad.Position
        local Players = game:GetService("Players")
        local LocalPlayer = Players.LocalPlayer

        local function getTargetHRP()
            if LocalPlayer.Character then
                return LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
            end
            return nil
        end

        crimpad.Size = Vector3.new(10, 1, 5)
        crimpad.Transparency = 0
        crimpad.BrickColor = BrickColor.new("Bright red")
        crimpad.Material = Enum.Material.Neon

        local hrp = getTargetHRP()
        if hrp then
            crimpad.Position = hrp.Position - Vector3.new(0, hrp.Size.Y/2 + crimpad.Size.Y/2, 0)
        end

        task.delay(5, function()
            crimpad.Position = oldpos
            crimpad.Size = Vector3.new(1,1,1)
            crimpad.Transparency = 1
            crimpad.BrickColor = BrickColor.new("Bright red")
            crimpad.Material = Enum.Material.SmoothPlastic
        end)
        -- End Join Criminal script
    end
})

--// MAIN TAB BODY SECTION
local BodySection = TabHandles.MainTab:Section({ Title = "Body", Icon = "activity" })
BodySection:Button({
    Title = "Infinite Stamina",
    Icon = "zap",
    Callback = function()
        local Event = game:GetService("ReplicatedStorage").Events.UpdateStat
firesignal(Event.OnClientEvent, 
    "Stamina",
    math.huge
)
    end
})

BodySection:Button({
    Title = "Skip Treadmill",
    Icon = "fast-forward",
    Callback = function()
        local Event = game:GetService("ReplicatedStorage").Events.UpdateStat
        for i = 1, 4 do
            firesignal(Event.OnClientEvent, "Runspeed", 1)
        end
    end
})

--// VISUALS TAB
local killfeedEnabled = false

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local Event = ReplicatedStorage:WaitForChild("Events"):WaitForChild("Killfeed")

local player = Players.LocalPlayer
local gui, feedFrame, layout

local function InitKillfeed()
    if gui then return end -- prevent creating multiple UIs
    gui = Instance.new("ScreenGui")
    gui.Name = "KillfeedUI"
    gui.ResetOnSpawn = false
    gui.Parent = player:WaitForChild("PlayerGui")

    feedFrame = Instance.new("Frame")
    feedFrame.Size = UDim2.new(0, 300, 1, 0)
    feedFrame.Position = UDim2.new(1, -310, 0, 0)
    feedFrame.BackgroundTransparency = 1
    feedFrame.Parent = gui

    layout = Instance.new("UIListLayout")
    layout.Parent = feedFrame
    layout.SortOrder = Enum.SortOrder.LayoutOrder
    layout.VerticalAlignment = Enum.VerticalAlignment.Top
    layout.Padding = UDim.new(0, 6)
end

local function AddKill(killerName, killerColor, weapon, victimName, victimColor, headshot, showHealth)
    if not killfeedEnabled then return end -- skip if disabled
    local entry = Instance.new("TextLabel")
    entry.Size = UDim2.new(1, 0, 0, 20)
    entry.BackgroundTransparency = 1
    entry.TextScaled = false
    entry.RichText = true
    entry.Font = Enum.Font.SourceSansBold
    entry.TextXAlignment = Enum.TextXAlignment.Left
    entry.TextStrokeTransparency = 0.8
    entry.TextSize = 18

    local text = string.format(
        "<font color='#%02x%02x%02x'>%s</font> <font color='#ff00ff'>[%s]</font> <font color='#%02x%02x%02x'>%s</font>",
        math.floor(killerColor.R * 255),
        math.floor(killerColor.G * 255),
        math.floor(killerColor.B * 255),
        killerName,
        weapon,
        math.floor(victimColor.R * 255),
        math.floor(victimColor.G * 255),
        math.floor(victimColor.B * 255),
        victimName
    )

    if headshot then text = text .. " 💀" end
    if showHealth then text = text .. " ❤️" end

    entry.Text = text
    entry.Parent = feedFrame

    task.delay(5, function()
        if entry then
            for i = 1, 20 do
                entry.TextTransparency = i / 20
                task.wait(0.05)
            end
            entry:Destroy()
        end
    end)
end

-- Connect the event
Event.OnClientEvent:Connect(AddKill)

-- Hook up to toggle
TabHandles.VisualsTab:Toggle({
    Title = "Custom Killfeed",
    Icon = "list",
    Value = false,
    Callback = function(state)
        killfeedEnabled = state
        if state then
            InitKillfeed()
        elseif gui then
            gui:Destroy()
            gui = nil
            feedFrame = nil
            layout = nil
        end
    end
})

-- Team ESP with Toggle
local Players = game:GetService("Players")

local TeamESP = {}
local runningTeam = false
local playerConnectionsTeam = {}
local globalConnectionsTeam = {}

local teamColors = {
    ["Inmates"] = Color3.fromRGB(255,165,0),
    ["Guards"] = Color3.fromRGB(0,0,255),
    ["Warden"] = Color3.fromRGB(0,0,139),
    ["Criminals"] = Color3.fromRGB(255,0,0),
}

local function updateHighlightTeam(player)
    if player == Players.LocalPlayer then return end
    local character = player.Character
    if not character then return end

    -- remove old highlight
    if character:FindFirstChild("TeamHighlight") then
        character.TeamHighlight:Destroy()
    end

    local teamName = player.Team and player.Team.Name or ""
    local color = teamColors[teamName]
    if not color then return end

    local highlight = Instance.new("Highlight")
    highlight.Name = "TeamHighlight"
    highlight.FillColor = color
    highlight.OutlineColor = color
    highlight.Adornee = character
    highlight.Parent = character
end

local function monitorPlayerTeam(player)
    if player == Players.LocalPlayer then return end
    local conns = {}

    table.insert(conns, player.CharacterAdded:Connect(function()
        if runningTeam then updateHighlightTeam(player) end
    end))

    table.insert(conns, player:GetPropertyChangedSignal("Team"):Connect(function()
        if runningTeam then updateHighlightTeam(player) end
    end))

    if player.Character then
        updateHighlightTeam(player)
    end

    playerConnectionsTeam[player] = conns
end

function TeamESP.Start()
    if runningTeam then return end
    runningTeam = true

    for _, player in ipairs(Players:GetPlayers()) do
        monitorPlayerTeam(player)
    end

    table.insert(globalConnectionsTeam, Players.PlayerAdded:Connect(monitorPlayerTeam))
end

function TeamESP.Stop()
    runningTeam = false

    for player, conns in pairs(playerConnectionsTeam) do
        for _, c in ipairs(conns) do
            c:Disconnect()
        end
    end
    playerConnectionsTeam = {}

    for _, c in ipairs(globalConnectionsTeam) do
        c:Disconnect()
    end
    globalConnectionsTeam = {}

    for _, player in ipairs(Players:GetPlayers()) do
        if player.Character then
            local highlight = player.Character:FindFirstChild("TeamHighlight")
            if highlight then
                highlight:Destroy()
            end
        end
    end
end

-- UI Toggle (Visuals Tab)
TabHandles.VisualsTab:Toggle({
    Title = "Team ESP",
    Default = false,
    Callback = function(state)
        if state then
            TeamESP.Start()
        else
            TeamESP.Stop()
        end
    end
})

--// Hostile Detector ESP
local Players = game:GetService("Players")

local HostileDetector = {}
local runningHostile = false
local playerConnectionsHostile = {}
local globalConnectionsHostile = {}

local HIGHLIGHT_COLOR = Color3.fromRGB(255, 0, 255)
local IGNORED_TEAMS = {["Guards"]=true, ["Warden"]=true}

local function setHighlightHostile(character, enabled)
    if not character then return end
    local highlight = character:FindFirstChild("HostileHighlight")
    if enabled then
        if not highlight then
            highlight = Instance.new("Highlight")
            highlight.Name = "HostileHighlight"
            highlight.FillColor = HIGHLIGHT_COLOR
            highlight.OutlineColor = Color3.fromRGB(255,255,255)
            highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
            highlight.Parent = character
        end
    else
        if highlight then
            highlight:Destroy()
        end
    end
end

local function isIgnored(player)
    return player.Team and IGNORED_TEAMS[player.Team.Name]
end

local function updatePlayerHostile(player)
    if player == Players.LocalPlayer then return end
    local character = player.Character
    if not character then return end
    local status = player:FindFirstChild("Status")
    if not status then return end
    local hostile = status:FindFirstChild("Hostile")
    if not hostile then return end
    if not isIgnored(player) and hostile.Value == true then
        setHighlightHostile(character, true)
    else
        setHighlightHostile(character, false)
    end
end

local function monitorPlayerHostile(player)
    if not runningHostile then return end
    local conns = {}

    table.insert(conns, player.CharacterAdded:Connect(function()
        task.wait(1)
        updatePlayerHostile(player)
    end))
    table.insert(conns, player.CharacterRemoving:Connect(function()
        for _, c in ipairs(conns) do c:Disconnect() end
    end))
    table.insert(conns, player:GetPropertyChangedSignal("Team"):Connect(function()
        updatePlayerHostile(player)
    end))

    local status = player:FindFirstChild("Status") or player:WaitForChild("Status",5)
    if status then
        local hostile = status:FindFirstChild("Hostile")
        if hostile then
            table.insert(conns, hostile.Changed:Connect(function()
                updatePlayerHostile(player)
            end))
        end
    end
    playerConnectionsHostile[player] = conns
end

function HostileDetector.Start()
    if runningHostile then return end
    runningHostile = true
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= Players.LocalPlayer then
            monitorPlayerHostile(player)
        end
    end
    table.insert(globalConnectionsHostile, Players.PlayerAdded:Connect(function(player)
        monitorPlayerHostile(player)
        task.wait(1)
        for _, p in ipairs(Players:GetPlayers()) do updatePlayerHostile(p) end
    end))
    table.insert(globalConnectionsHostile, Players.PlayerRemoving:Connect(function()
        for _, p in ipairs(Players:GetPlayers()) do updatePlayerHostile(p) end
    end))
    task.spawn(function()
        while runningHostile do
            for _, p in ipairs(Players:GetPlayers()) do updatePlayerHostile(p) end
            task.wait(2)
        end
    end)
end

function HostileDetector.Stop()
    runningHostile = false
    for player, conns in pairs(playerConnectionsHostile) do
        for _, c in ipairs(conns) do c:Disconnect() end
    end
    playerConnectionsHostile = {}
    for _, c in ipairs(globalConnectionsHostile) do
        c:Disconnect()
    end
    globalConnectionsHostile = {}
    for _, player in ipairs(Players:GetPlayers()) do
        if player.Character then
            local highlight = player.Character:FindFirstChild("HostileHighlight")
            if highlight then highlight:Destroy() end
        end
    end
end

--// Toggle for Hostile ESP (UI Tab example)
TabHandles.VisualsTab:Toggle({
    Title = "Hostile ESP",
    Default = false,
    Callback = function(state)
        if state then
            HostileDetector.Start()
        else
            HostileDetector.Stop()
        end
    end
})


--// RAGE TAB
local RageTab = TabHandles.RageTab

--// HOSTILE TELEPORTER
local HostileTeleporter = {}
local hostileRunning = false
local hostileTrackedCharacters = {}

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local playersFolder = workspace:WaitForChild("Players")
local DISTANCE_AHEAD = -5
local UPDATE_INTERVAL = 1

-- Helper functions
local function getHostileTargetHRP()
    if LocalPlayer.Character then
        return LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
    end
    return nil
end

local function isHostileTarget(character)
    local player = Players:GetPlayerFromCharacter(character)
    if not player or player == LocalPlayer then return false end
    if player.Team and player.Team.Name == "Criminals" then return true end
    local status = player:FindFirstChild("Status")
    if status and status:FindFirstChild("Hostile") then
        return status.Hostile.Value == true
    end
    return false
end

local function teleportHostileInFront(character, targetHRP)
    local hrp = character:FindFirstChild("HumanoidRootPart")
    local humanoid = character:FindFirstChild("Humanoid")
    if hrp and targetHRP and humanoid and not humanoid.Sit then
        local forwardPos = targetHRP.Position + targetHRP.CFrame.LookVector * DISTANCE_AHEAD
        hrp.CFrame = CFrame.new(forwardPos)
        hrp.Anchored = true
    end
end

local function trackHostile(character)
    for _, c in ipairs(hostileTrackedCharacters) do
        if c == character then return end
    end
    if isHostileTarget(character) then
        table.insert(hostileTrackedCharacters, character)
        local hrp = character:FindFirstChild("HumanoidRootPart")
        if hrp then hrp.Anchored = true end
    end
end

local function untrackHostile(character)
    for i, c in ipairs(hostileTrackedCharacters) do
        if c == character then
            local hrp = c:FindFirstChild("HumanoidRootPart")
            if hrp then hrp.Anchored = false end
            table.remove(hostileTrackedCharacters, i)
            break
        end
    end
end

local function monitorHostilePlayer(player)
    player:GetPropertyChangedSignal("Team"):Connect(function()
        local character = player.Character
        if character then
            if isHostileTarget(character) then
                trackHostile(character)
            else
                untrackHostile(character)
            end
        end
    end)
    local status = player:FindFirstChild("Status")
    if status and status:FindFirstChild("Hostile") then
        status.Hostile.Changed:Connect(function()
            local character = player.Character
            if character then
                if isHostileTarget(character) then
                    trackHostile(character)
                else
                    untrackHostile(character)
                end
            end
        end)
    end
end

function HostileTeleporter.Start()
    if hostileRunning then return end
    hostileRunning = true
    hostileTrackedCharacters = {}

    for _, character in ipairs(playersFolder:GetChildren()) do trackHostile(character) end
    playersFolder.ChildAdded:Connect(trackHostile)

    for _, player in ipairs(Players:GetPlayers()) do monitorHostilePlayer(player) end
    Players.PlayerAdded:Connect(monitorHostilePlayer)

    spawn(function()
        while hostileRunning do
            local targetHRP = getHostileTargetHRP()
            if targetHRP then
                for _, character in ipairs(hostileTrackedCharacters) do
                    teleportHostileInFront(character, targetHRP)
                end
            end
            task.wait(UPDATE_INTERVAL)
        end
    end)
end

function HostileTeleporter.Stop()
    hostileRunning = false
    for _, character in ipairs(hostileTrackedCharacters) do
        local hrp = character:FindFirstChild("HumanoidRootPart")
        if hrp then hrp.Anchored = false end
    end
    hostileTrackedCharacters = {}
end

--// Toggle for Hostile Teleporter
RageTab:Toggle({
    Title = "Hostile Teleporter",
    Value = false,
    Callback = function(state)
        if state then
            HostileTeleporter.Start()
        else
            HostileTeleporter.Stop()
        end
    end
})

--// POLICE/WARDEN TELEPORTER
local PoliceWardenTeleporter = {}
local policeTrackedCharacters = {}
local RunService = game:GetService("RunService")
local policeLoop

local function getPoliceTargetHRP()
    if LocalPlayer.Character then
        return LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
    end
    return nil
end

local function isPoliceTarget(character)
    local player = Players:GetPlayerFromCharacter(character)
    if not player or player == LocalPlayer then return false end
    if player.Team and (player.Team.Name == "Guards" or player.Team.Name == "Warden") then return true end
    return false
end

local function teleportPoliceInFront(character, targetHRP)
    local hrp = character:FindFirstChild("HumanoidRootPart")
    local humanoid = character:FindFirstChild("Humanoid")
    if hrp and targetHRP and humanoid and not humanoid.Sit then
        local forwardPos = targetHRP.Position + targetHRP.CFrame.LookVector * DISTANCE_AHEAD
        hrp.CFrame = CFrame.new(forwardPos)
        hrp.Anchored = true
    end
end

local function trackPolice(character)
    for _, c in ipairs(policeTrackedCharacters) do
        if c == character then return end
    end
    if isPoliceTarget(character) then
        table.insert(policeTrackedCharacters, character)
        local hrp = character:FindFirstChild("HumanoidRootPart")
        if hrp then hrp.Anchored = true end
    end
end

local function untrackPolice(character)
    for i, c in ipairs(policeTrackedCharacters) do
        if c == character then
            local hrp = c:FindFirstChild("HumanoidRootPart")
            if hrp then hrp.Anchored = false end
            table.remove(policeTrackedCharacters, i)
            break
        end
    end
end

local function monitorPolicePlayer(player)
    player:GetPropertyChangedSignal("Team"):Connect(function()
        local character = player.Character
        if character then
            if isPoliceTarget(character) then
                trackPolice(character)
            else
                untrackPolice(character)
            end
        end
    end)
end

function PoliceWardenTeleporter.Start()
    for _, character in ipairs(playersFolder:GetChildren()) do trackPolice(character) end
    playersFolder.ChildAdded:Connect(trackPolice)

    for _, player in ipairs(Players:GetPlayers()) do monitorPolicePlayer(player) end
    Players.PlayerAdded:Connect(monitorPolicePlayer)

    policeLoop = RunService.Heartbeat:Connect(function()
        local targetHRP = getPoliceTargetHRP()
        if targetHRP then
            for _, character in ipairs(policeTrackedCharacters) do
                teleportPoliceInFront(character, targetHRP)
            end
        end
    end)
end

function PoliceWardenTeleporter.Stop()
    if policeLoop then
        policeLoop:Disconnect()
        policeLoop = nil
    end
    for _, character in ipairs(policeTrackedCharacters) do
        local hrp = character:FindFirstChild("HumanoidRootPart")
        if hrp then hrp.Anchored = false end
    end
    policeTrackedCharacters = {}
end

--// Toggle for Police Teleporter
RageTab:Toggle({
    Title = "Police Teleporter",
    Value = false,
    Callback = function(state)
        if state then
            PoliceWardenTeleporter.Start()
        else
            PoliceWardenTeleporter.Stop()
        end
    end
})

--// Spinbot Script
local Spinbot = {}

local running = false
local connection
local speed = 50 -- default spin speed

function Spinbot.Start()
    if running then return end
    running = true

    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local hrp = character:WaitForChild("HumanoidRootPart")

    connection = game:GetService("RunService").RenderStepped:Connect(function()
        if running then
            hrp.CFrame = hrp.CFrame * CFrame.Angles(0, math.rad(speed), 0)
        end
    end)
end

function Spinbot.Stop()
    if not running then return end
    running = false
    if connection then
        connection:Disconnect()
        connection = nil
    end
end

--// Rage Tab Toggle
TabHandles.RageTab:Toggle({
    Title = "Spinbot",
    Value = false,
    Callback = function(state)
        if state then
            Spinbot.Start()
        else
            Spinbot.Stop()
        end
    end
})

--// REMOVE DOORS (RAGE)
local Workspace = game:GetService("Workspace")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local paths = {
    { parent = Workspace, name = "Doors" },       -- Workspace.Doors
    { parent = Workspace:WaitForChild("Map"), name = "doors" } -- Workspace.Map.doors
}

local function toggleFolder(folder)
    if not folder then return end

    if folder.Parent == Workspace or folder.Parent == Workspace:WaitForChild("Map") then
        folder.Parent = ReplicatedStorage
    elseif folder.Parent == ReplicatedStorage then
        if folder.Name == "Doors" then
            folder.Parent = Workspace
        elseif folder.Name == "doors" then
            folder.Parent = Workspace:WaitForChild("Map")
        end
    end
end

local function toggleAll()
    for _, info in ipairs(paths) do
        local folder = info.parent:FindFirstChild(info.name) or ReplicatedStorage:FindFirstChild(info.name)
        if folder then
            toggleFolder(folder)
        end
    end
end

-- UI Toggle
TabHandles.RageTab:Toggle({
    Title = "Remove Doors",
    Default = false,
    Callback = function(state)
        if state then
            toggleAll()
        else
            toggleAll()
        end
    end
})

--// FAST SPAMMER (RAGE)
local Players = game:GetService("Players")
local RS = game:GetService("ReplicatedStorage")
local LocalPlayer = Players.LocalPlayer

local RequestToolEvent = RS.Events.RequestTool
local DropToolEvent = RS.Events.DropTool

local requests = {{"Inmate",1},{"Inmate",2},{"Inmate",3}}
local dropNames = {"Crude Knife","Glock-17","UZI"}

local running = false
local Backpack
local Char

-- PrisonDealer GUI toggle
local gui = LocalPlayer:WaitForChild("PlayerGui"):WaitForChild("PrisonDealer")

local function toggleGUI()
    if gui then
        gui.Enabled = not gui.Enabled
    end
end

-- Update Character + Backpack references on respawn
local function updateRefs(character)
    Char = character
    Backpack = LocalPlayer:WaitForChild("Backpack")
end

LocalPlayer.CharacterAdded:Connect(updateRefs)
if LocalPlayer.Character then
    updateRefs(LocalPlayer.Character)
end

-- Spam loop
local function spam()
    while running do
        if not Char or not Backpack then
            task.wait(0.1)
            continue
        end

        -- RequestTool spam
        for _, args in ipairs(requests) do
            pcall(function() RequestToolEvent:FireServer(table.unpack(args)) end)
            task.wait(0.001)
        end

        -- DropTool spam
        for _, name in ipairs(dropNames) do
            local tool = Backpack:FindFirstChild(name)
            if tool and Char then
                if tool.Parent ~= Char then
                    pcall(function() tool.Parent = Char end)
                    task.wait(0.001)
                end
                pcall(function() DropToolEvent:FireServer(tool) end)
                task.wait(0.001)
            end
        end
    end
end

-- Rage Tab Toggle
TabHandles.RageTab:Toggle({
    Title = "Fast Spammer",
    Default = false,
    Callback = function(state)
        running = state
        toggleGUI()
        if running then
            task.spawn(spam)
        end
    end
})

-- Easy Bank Toggle (Rage Tab)
local bank = workspace.Map.Town["BANK!?"]

-- Target both [4] child and Lasers folder
local targets = {
    bank:GetChildren()[4],
    bank:WaitForChild("Lasers")
}

local lasersEnabled = true

local function toggleLasers(state)
    lasersEnabled = state
    for _, container in ipairs(targets) do
        for _, obj in ipairs(container:GetDescendants()) do
            if obj:IsA("BasePart") then
                if lasersEnabled then
                    obj.CanTouch = true
                    obj.Color = Color3.fromRGB(170, 0, 0) -- original red
                else
                    obj.CanTouch = false
                    obj.Color = Color3.fromRGB(0, 177, 0) -- bright green
                end
            end
        end
    end
end

-- Add to Rage tab as a toggle
TabHandles.RageTab:Toggle({
    Title = "Easy Bank",
    Default = false,
    Callback = function(state)
        toggleLasers(state)
    end
})

-- Helicopter Power (Rage Tab)
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

local LocalPlayer = Players.LocalPlayer
local active = false
local part = nil
local weld = nil
local offset = Vector3.new(0, 0, 20)

local function createPart(hrp)
    local p = Instance.new("Part")
    p.Massless = true
    p.Size = Vector3.new(30, 30, 65)
    p.Transparency = 0.85
    p.Anchored = false
    p.CanCollide = false
    p.Material = Enum.Material.Neon
    p.Color = Color3.fromRGB(0, 0, 0)
    p.CFrame = hrp.CFrame * CFrame.new(offset)
    p.Parent = workspace

    local w = Instance.new("WeldConstraint")
    w.Part0 = hrp
    w.Part1 = p
    w.Parent = p

    p.Touched:Connect(function(hit)
        if hit:IsA("BasePart") and not hit:IsDescendantOf(LocalPlayer.Character) then
            if hit.CanCollide then
                hit.CanCollide = false
                task.delay(5, function()
                    if hit and hit.Parent then
                        hit.CanCollide = true
                    end
                end)
            end
        end
    end)

    return p, w
end

local function enablePower()
    if not LocalPlayer.Team or LocalPlayer.Team.Name ~= "Guards" then return end
    local character = LocalPlayer.Character
    if not character then return end
    local hrp = character:FindFirstChild("HumanoidRootPart")
    if not hrp then return end

    if part then return end
    part, weld = createPart(hrp)
end

local function disablePower()
    if part then
        part:Destroy()
        part = nil
        weld = nil
    end
end

local function togglePower(state)
    active = state
    if active then
        enablePower()
    else
        disablePower()
    end
end

-- Rage Tab Toggle
TabHandles.RageTab:Toggle({
    Title = "Helicopter Noclip ( Guards Only )",
    Default = false,
    Callback = togglePower
})

-- Re-enable on respawn
LocalPlayer.CharacterAdded:Connect(function(char)
    if active then
        task.wait(1)
        enablePower()
    end
end)

--// MISC TAB
-- Staff Notifier
local StaffNotifier = {}
local running = false
local notifiedPlayers = {}

-- Staff list
local staffList = {
    [4036616925] = "EndOfTheLine_YTVC3",
    [4835226372] = "pzrpled",
    [1079506543] = "modbotter",
    [1827703218] = "Jat",
    [1314873852] = "Ruby Kurosawa",
    [2776100361] = "LordxEgg",
    [5095781620] = "fwomed",
    [6019613135] = "contact",
    [1676500493] = "hamooodylil",
    [810011681]  = "caisr",
    [321731898]  = "FieldsCRW",
    [1622836918] = "5ivio",
    [2811348175] = "PrestonTug",
    [662263759]  = "TheCatGodOfDeath",
    [2641543045] = "Dev_COL",
    [2418168241] = "Axely",
    [136568311]  = "Ban",
    [720403576]  = "bannersblox",
    [6212777205] = "Jitze",
    [330929769]  = "Alfa",
    [1562173]    = "hethr",
    [104529797]  = "d1anna",
    [5309987]    = "ntaosi",
    [417258098]  = "xA_lfa",
    [2230856063] = "Rez",
}

local Players = game:GetService("Players")

function StaffNotifier.Start()
    if running then return end
    running = true
    notifiedPlayers = {}

    -- Check current players
    for _, player in ipairs(Players:GetPlayers()) do
        if staffList[player.UserId] and not notifiedPlayers[player.UserId] then
            notifiedPlayers[player.UserId] = true
            game:GetService("StarterGui"):SetCore("SendNotification", {
                Title = "Staff Online!",
                Text = staffList[player.UserId].." has joined the game",
                Duration = 5
            })
        end
    end

    -- Listen for new players
    Players.PlayerAdded:Connect(function(player)
        if running and staffList[player.UserId] and not notifiedPlayers[player.UserId] then
            notifiedPlayers[player.UserId] = true
            game:GetService("StarterGui"):SetCore("SendNotification", {
                Title = "Staff Online!",
                Text = staffList[player.UserId].." has joined the game",
                Duration = 5
            })
        end
    end)
end

function StaffNotifier.Stop()
    running = false
    notifiedPlayers = {}
end
TabHandles.MiscTab:Toggle({
    Title = "Staff Notifier",
    Value = false,
    Callback = function(state)
        if state then
            StaffNotifier.Start()
        else
            StaffNotifier.Stop()
        end
    end
})

TabHandles.MiscTab:Button({
    Title = "Add Keys",
    Icon = "key-round",
    Callback = function()
        local Event = game:GetService("ReplicatedStorage"):WaitForChild("Rankup")
        Event:FireServer(10)
    end
})

TabHandles.MiscTab:Button({
    Title = "Add Skins",
    Icon = "lock-open",
    Callback = function()
        local award = game:GetService("ReplicatedStorage").SkinFolder.Events.AwardSkin

        local skins = {
            "24k Gold",
            "24k Gold Pistol",
            "Anoidzed Red",
            "Galaxy",
            "Super Soaker",
            "The Patriot",
            "Woodland"
        }

        for _, skin in ipairs(skins) do
            award:InvokeServer(skin)
        end
    end
})
-- Rapid Auto Farm
local award = game:GetService("ReplicatedStorage").SkinFolder.Events.AwardSkin
local sell = game:GetService("ReplicatedStorage").SkinFolder.Events.Sell
local skins = { "24k Gold","24k Gold Pistol","Anoidzed Red","Galaxy","Super Soaker","The Patriot","Woodland" }

_G.AutoSkinFarmEnabled = false

local function startAutoFarm()
    task.spawn(function()
        while _G.AutoSkinFarmEnabled do
            for _, skin in ipairs(skins) do
                task.spawn(function()
                    pcall(function()
                        award:InvokeServer(skin)
                        sell:FireServer(skin, true, "")
                    end)
                end)
            end
            task.wait(0.01) -- tiny delay to prevent crashes
        end
    end)
end

-- Toggle for Misc Tab
TabHandles.MiscTab:Toggle({
    Title = "Rapid Auto Farm",
    Value = false,
    Callback = function(state)
        _G.AutoSkinFarmEnabled = state
        if state then
            startAutoFarm()
        end
    end
})
-- Slow Auto Farm
local slowFarmEnabled = false

local function startSlowAutoFarm()
    task.spawn(function()
        while slowFarmEnabled do
            for _, skin in ipairs(skins) do
                pcall(function()
                    award:InvokeServer(skin)
                    sell:FireServer(skin, true, "")
                end)
            end
            task.wait(0.5) -- slower, safer loop (2x per second)
        end
    end)
end

-- Toggle for Misc Tab
TabHandles.MiscTab:Toggle({
    Title = "Slow Auto Farm",
    Value = false,
    Callback = function(state)
        slowFarmEnabled = state
        if state then
            startSlowAutoFarm()
        end
    end
})

local moneyCooldown = false

TabHandles.MiscTab:Button({
    Title = "Money Giver",
    Icon = "dollar-sign",
    Callback = function()
        if moneyCooldown then return end
        moneyCooldown = true

        -- fire money event
        game:GetService("ReplicatedStorage").SkinFolder.Events.CashBuy:FireServer(-30000, 1)

        -- reset cooldown after 5s
        task.delay(5, function()
            moneyCooldown = false
        end)
    end
})

local fuseLoop = false

TabHandles.MiscTab:Toggle({
    Title = "FuseBox Looper",
    Icon = "zap",
    Value = false,
    Callback = function(state)
        fuseLoop = state
        if fuseLoop then
            task.spawn(function()
                while fuseLoop do
                    pcall(function()
                        game:GetService("ReplicatedStorage").Events.FuseBoxHit:FireServer(workspace.FuseBox)
                    end)
                    task.wait(0.01) -- adjust delay if needed
                end
            end)
        end
    end
})

--// CREDITS TAB
TabHandles.CreditsTab:Paragraph({
    Title = "Developers 🔨",
    Desc = "moldedblood & dollosha / We appreciate you guys alot for using our script!",
    ImageSize = 40,
    Color = "White"
})

TabHandles.CreditsTab:Paragraph({
    Title = "Special Thanks ❤️",
    Desc = "Primal users & Supporters",
    ImageSize = 40,
    Color = "Grey"
})

TabHandles.CreditsTab:Button({
    Title = "Join our Discord",
    Desc = "Click to copy invite link",
    Icon = "discord", -- change if your UI doesn't support this icon
    Callback = function()
        setclipboard("https://discord.gg/Kk4qKFrunj") -- replace with your invite
    end
})

--// APPEARANCE TAB
local AppearanceSection = TabHandles.AppearanceTab:Section({ Title = "Appearance Settings", Icon = "settings" })

AppearanceSection:Paragraph({
    Title = "Customize Interface",
    Desc = "Personalize your experience",
    Image = "palette",
    ImageSize = 20,
    Color = "White"
})

local themes = {}
for themeName, _ in pairs(Primal:GetThemes()) do
    table.insert(themes, themeName)
end
table.sort(themes)

local canchangetheme = true
local canchangedropdown = true

local themeDropdown = AppearanceSection:Dropdown({
    Title = "loc:THEME_SELECT",
    Values = themes,
    Value = "Dark",
    Callback = function(theme)
        canchangedropdown = false
        Primal:SetTheme(theme)
        Primal:Notify({ Title = "Theme Applied", Content = theme, Icon = "palette", Duration = 2 })
        canchangedropdown = true
    end
})

local transparencySlider = AppearanceSection:Slider({
    Title = "loc:TRANSPARENCY",
    Value = { Min = 0, Max = 1, Default = 0.2 },
    Step = 0.1,
    Callback = function(value)
        Primal.TransparencyValue = tonumber(value)
        Window:ToggleTransparency(tonumber(value) > 0)
    end
})

local ThemeToggle = AppearanceSection:Toggle({
    Title = "Enable Dark Mode",
    Desc = "Use dark color scheme",
    Value = true,
    Callback = function(state)
        if canchangetheme then Primal:SetTheme(state and "Dark" or "Light") end
        if canchangedropdown then themeDropdown:Select(state and "Dark" or "Light") end
    end
})

Primal:OnThemeChange(function(theme)
    canchangetheme = false
    ThemeToggle:Set(theme == "Dark")
    canchangetheme = true
end)

AppearanceSection:Button({
    Title = "Create New Theme",
    Icon = "plus",
    Callback = function()
        Window:Dialog({
            Title = "Create Theme",
            Content = "This feature is coming soon!",
            Buttons = { { Title = "OK", Variant = "Primary" } }
        })
    end
})
