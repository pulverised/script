local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
local Players = game:GetService("Players") -- âœ… Add this

local Window = Rayfield:CreateWindow({
   Name = "Primal Cheats",
   Icon = 0,
   LoadingTitle = "Primal Cheats",
   LoadingSubtitle = "by MoldedBlood",
   ShowText = "Primal",
   Theme = "Serenity",
   ToggleUIKeybind = "L",
   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false,
   ConfigurationSaving = {Enabled = true, FolderName = nil, FileName = "Big Hub"},
   Discord = {Enabled = false, Invite = "noinvitelink", RememberJoins = true},
   KeySystem = true,
   KeySettings = {
      Title = "Primal Cheats",
      Subtitle = "Key System",
      Note = "No method of obtaining the key is provided",
      FileName = "Key",
      SaveKey = true,
      GrabKeyFromSite = false,
      Key = {"test"}
   }
})

-- Main Tab
local Tab = Window:CreateTab("Main", 4483362458)
local Section = Tab:CreateSection("ESP")

local TeamESP = {}
local runningTeam = false
local playerConnectionsTeam = {}
local globalConnectionsTeam = {}

local teamColors = {
    ["Inmates"] = Color3.fromRGB(255,165,0),
    ["Guards"] = Color3.fromRGB(0,0,255),
    ["Warden"] = Color3.fromRGB(0,0,139),
    ["Criminals"] = Color3.fromRGB(255,0,0),
}

local function updateHighlightTeam(player)
    if not player or player == Players.LocalPlayer then return end
    local character = player.Character
    if not character then return end
    if character:FindFirstChild("TeamHighlight") then
        character.TeamHighlight:Destroy()
    end
    local teamName = player.Team and player.Team.Name or ""
    local color = teamColors[teamName]
    if not color then return end
    local highlight = Instance.new("Highlight")
    highlight.Name = "TeamHighlight"
    highlight.FillColor = color
    highlight.OutlineColor = color
    highlight.Adornee = character
    highlight.Parent = character
end

local function monitorPlayerTeam(player)
    if not player or player == Players.LocalPlayer then return end
    local conns = {}
    table.insert(conns, player.CharacterAdded:Connect(function()
        if runningTeam then updateHighlightTeam(player) end
    end))
    table.insert(conns, player:GetPropertyChangedSignal("Team"):Connect(function()
        if runningTeam then updateHighlightTeam(player) end
    end))
    if player.Character and runningTeam then updateHighlightTeam(player) end
    playerConnectionsTeam[player] = conns
end

function TeamESP.Start()
    if runningTeam then return end
    runningTeam = true
    for _, player in ipairs(Players:GetPlayers()) do monitorPlayerTeam(player) end
    table.insert(globalConnectionsTeam, Players.PlayerAdded:Connect(function(player)
        monitorPlayerTeam(player)
        if runningTeam then updateHighlightTeam(player) end
    end))
end

function TeamESP.Stop()
    runningTeam = false
    for player, conns in pairs(playerConnectionsTeam) do
        for _, c in ipairs(conns) do
            if c and c.Disconnect then
                c:Disconnect()
            end
        end
    end
    playerConnectionsTeam = {}
    for _, c in ipairs(globalConnectionsTeam) do
        if c and c.Disconnect then
            c:Disconnect()
        end
    end
    globalConnectionsTeam = {}
    for _, player in ipairs(Players:GetPlayers()) do
        if player.Character then
            local highlight = player.Character:FindFirstChild("TeamHighlight")
            if highlight then highlight:Destroy() end
        end
    end
end

-- Rayfield Toggle Esp
local Toggle = Tab:CreateToggle({
    Name = "Team ESP",
    CurrentValue = false,
    Flag = "TeamESP_Toggle",
    Callback = function(Value)
        local success, err = pcall(function()
            if Value then
                TeamESP.Start()
            else
                TeamESP.Stop()
            end
        end)
        if not success then
            warn("Team ESP toggle error: "..err)
        end
    end,
})

-- HostileDetector Script
local HostileDetector = {}
local runningHostile = false
local playerConnectionsHostile = {}
local globalConnectionsHostile = {}

local HIGHLIGHT_COLOR = Color3.fromRGB(255, 0, 255)
local IGNORED_TEAMS = {["Guards"]=true, ["Warden"]=true}

local function setHighlightHostile(character, enabled)
    if not character then return end
    local highlight = character:FindFirstChild("HostileHighlight")
    if enabled then
        if not highlight then
            highlight = Instance.new("Highlight")
            highlight.Name = "HostileHighlight"
            highlight.FillColor = HIGHLIGHT_COLOR
            highlight.OutlineColor = Color3.fromRGB(255,255,255)
            highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
            highlight.Parent = character
        end
    else
        if highlight then
            highlight:Destroy()
        end
    end
end

local function isIgnored(player)
    return player.Team and IGNORED_TEAMS[player.Team.Name]
end

local function updatePlayerHostile(player)
    if player == Players.LocalPlayer then return end
    local character = player.Character
    if not character then return end
    local status = player:FindFirstChild("Status")
    if not status then return end
    local hostile = status:FindFirstChild("Hostile")
    if not hostile then return end
    if not isIgnored(player) and hostile.Value == true then
        setHighlightHostile(character, true)
    else
        setHighlightHostile(character, false)
    end
end

local function monitorPlayerHostile(player)
    if not runningHostile then return end
    local conns = {}

    table.insert(conns, player.CharacterAdded:Connect(function()
        task.wait(1)
        updatePlayerHostile(player)
    end))
    table.insert(conns, player.CharacterRemoving:Connect(function()
        for _, c in ipairs(conns) do c:Disconnect() end
    end))
    table.insert(conns, player:GetPropertyChangedSignal("Team"):Connect(function()
        updatePlayerHostile(player)
    end))
    local status = player:FindFirstChild("Status") or player:WaitForChild("Status",5)
    if status then
        local hostile = status:FindFirstChild("Hostile")
        if hostile then
            table.insert(conns, hostile.Changed:Connect(function()
                updatePlayerHostile(player)
            end))
        end
    end
    playerConnectionsHostile[player] = conns
end

function HostileDetector.Start()
    if runningHostile then return end
    runningHostile = true
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= Players.LocalPlayer then
            monitorPlayerHostile(player)
        end
    end
    table.insert(globalConnectionsHostile, Players.PlayerAdded:Connect(function(player)
        monitorPlayerHostile(player)
        task.wait(1)
        for _, p in ipairs(Players:GetPlayers()) do updatePlayerHostile(p) end
    end))
    table.insert(globalConnectionsHostile, Players.PlayerRemoving:Connect(function()
        for _, p in ipairs(Players:GetPlayers()) do updatePlayerHostile(p) end
    end))
    task.spawn(function()
        while runningHostile do
            for _, p in ipairs(Players:GetPlayers()) do updatePlayerHostile(p) end
            task.wait(2)
        end
    end)
end

function HostileDetector.Stop()
    runningHostile = false
    for player, conns in pairs(playerConnectionsHostile) do
        for _, c in ipairs(conns) do c:Disconnect() end
    end
    playerConnectionsHostile = {}
    for _, c in ipairs(globalConnectionsHostile) do
        c:Disconnect()
    end
    globalConnectionsHostile = {}
    for _, player in ipairs(Players:GetPlayers()) do
        if player.Character then
            local highlight = player.Character:FindFirstChild("HostileHighlight")
            if highlight then highlight:Destroy() end
        end
    end
end

-- Rayfield toggle for Hostile Detector
local HostileToggle = Tab:CreateToggle({
    Name = "Hostile Detector",
    CurrentValue = false,
    Flag = "HostileDetector_Toggle",
    Callback = function(Value)
        local success, err = pcall(function()
            if Value then
                HostileDetector.Start()
            else
                HostileDetector.Stop()
            end
        end)
        if not success then
            warn("Hostile Detector toggle error: "..err)
        end
    end,
})

local Section = Tab:CreateSection("Body")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local MessageEvent = ReplicatedStorage.Events.Tooltip
local Event = game:GetService("ReplicatedStorage").Events.UpdateStat

-- No Jump Cooldown / No Stamina Drain Toggle
local StaminaToggle = Tab:CreateToggle({
    Name = "No Jump Cooldown",
    CurrentValue = false,
    Flag = "NoJumpCooldown_Toggle",
    Callback = function(Value)
        if Value then
            -- Enable no stamina
            firesignal(MessageEvent.OnClientEvent, "Enabled no stamina !")
            firesignal(Event.OnClientEvent, "Stamina", 99999)
        else
            -- Reset stamina (set back to default, example 100)
            firesignal(MessageEvent.OnClientEvent, "Disabled no stamina !")
            firesignal(Event.OnClientEvent, "Stamina", 100)
        end
    end,
})
